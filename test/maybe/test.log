
#define TestBCM
#include <print.h>
#include <_int.h>
#include <maybe.h>

using namespace minimum;

int main() {
    Int u = 1;
    cout << "-------------------" << endl;
    maybe<Int> X;
    X = nothing<Int>(u);
    cout << bool(X) << ' ' << X.has_value() << endl;
    X = nothing<Int>(std::move(u));
    cout << bool(X) << ' ' << X.has_value() << endl;    
}



mkdir -p build
g++ -I../../include -I../../test/include  -lgtest -lpthread -L../Debug64  test-main.cc -o build/test-main -std=c++17 -fmax-errors=1
In file included from test-main.cc:5:0:
../../include/maybe.h: In instantiation of ‘minimum::maybe<just_t, nothing_t>::maybe(just_x&&) [with just_x = minimum::maybe<Int, Int&>; just_t = Int; nothing_t = minimum::_nothing]’:
test-main.cc:13:23:   required from here
../../include/maybe.h:22:38: error: no type named ‘type’ in ‘struct std::enable_if<false, minimum::maybe<Int, Int&> >’
     maybe(just_x &&just_v) : maybe_v(std::forward<typename std::enable_if<
                                      ^~~
compilation terminated due to -fmax-errors=1.
Makefile:18: recipe for target 'test-gen' failed

mkdir -p build
g++ -I../../include -I../../test/include  -lgtest -lpthread -L../Debug64  test-main.cc -o build/test-main -std=c++17 -fmax-errors=1
In file included from test-main.cc:5:0:
../../include/maybe.h: In instantiation of ‘minimum::maybe<just_t, nothing_t>::maybe(just_x&&) [with just_x = minimum::maybe<Int, Int&>; just_t = Int; nothing_t = int]’:
test-main.cc:13:23:   required from here
../../include/maybe.h:23:9: error: static assertion failed: you push an error-type value into the maybe_t<>!
         static_assert(
         ^~~~~~~~~~~~~
compilation terminated due to -fmax-errors=1.
Makefile:18: recipe for target 'test-gen' failed
make: *** [test-gen] Error 1
